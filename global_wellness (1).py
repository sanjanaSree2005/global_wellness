# -*- coding: utf-8 -*-
"""global_wellness.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vube7pJ6zhRiwlaTjlTZlASTZmLW_LlF
"""

import streamlit as st
import sqlite3
import bcrypt
import jwt
import datetime
import re
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

# optional heavy imports
try:
    from transformers import MarianMTModel, MarianTokenizer, pipeline
except Exception:
    MarianMTModel = MarianTokenizer = pipeline = None

# ---------------- CONFIG ----------------
SECRET_KEY = "wellness_secret_key"
DB_NAME = "users.db"
ADMIN_EMAIL = "admin@gmail.com"
ADMIN_PASS = "admin123"

# ---------------- DB SETUP & SAFETY ----------------
conn = sqlite3.connect(DB_NAME, check_same_thread=False)
cursor = conn.cursor()

# users table
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    email TEXT PRIMARY KEY,
    password BLOB NOT NULL,
    name TEXT,
    age_group TEXT,
    language TEXT
)
''')

# queries table
cursor.execute('''
CREATE TABLE IF NOT EXISTS queries (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_email TEXT,
    question TEXT,
    response TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')

# feedback table
cursor.execute('''
CREATE TABLE IF NOT EXISTS feedback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_email TEXT,
    query_id INTEGER,
    feedback_type TEXT,
    comment TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
''')

# kb table
cursor.execute('''
CREATE TABLE IF NOT EXISTS kb (
    intent TEXT PRIMARY KEY,
    keywords TEXT,
    response_en TEXT
)
''')

# admin_profile
cursor.execute('''
CREATE TABLE IF NOT EXISTS admin_profile (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL
)
''')

# admin
hashed = bcrypt.hashpw(ADMIN_PASS.encode(), bcrypt.gensalt())
cursor.execute("INSERT OR IGNORE INTO admin_profile (email, password_hash) VALUES (?, ?)",
               (ADMIN_EMAIL, hashed))
conn.commit()

def ensure_column(table, column_name, col_def):
    cursor.execute(f"PRAGMA table_info({table})")
    cols = [r[1] for r in cursor.fetchall()]
    if column_name not in cols:
        try:
            cursor.execute(f"ALTER TABLE {table} ADD COLUMN {column_name} {col_def}")
            conn.commit()
        except Exception:
            pass

# ensure commonly needed columns
ensure_column("queries", "user_email", "TEXT")
ensure_column("queries", "question", "TEXT")
ensure_column("queries", "response", "TEXT")
ensure_column("queries", "timestamp", "DATETIME")

ensure_column("feedback", "user_email", "TEXT")
ensure_column("feedback", "query_id", "INTEGER")
ensure_column("feedback", "feedback_type", "TEXT")
ensure_column("feedback", "comment", "TEXT")
ensure_column("feedback", "timestamp", "DATETIME")

ensure_column("kb", "intent", "TEXT")
ensure_column("kb", "keywords", "TEXT")
ensure_column("kb", "response_en", "TEXT")

# ---------------- INITIAL KNOWLEDGE BASE (kept same) ----------------
initial_kb = {
    "fever": {
        "keywords": "fever,temperature,high fever,बुखार",
        "response_en": "- Rest properly and avoid strenuous activity.\n- Drink plenty of water and fluids.\n- Take paracetamol if necessary.\n- Consult a doctor if fever persists beyond 3 days."
    },
    "cold": {
        "keywords": "cold,sneeze,runny nose,nasal congestion,stuffy nose,जुकाम,सर्दी",
        "response_en": "- Take rest and keep warm.\n- Drink warm water or herbal teas.\n- Use saline drops for nasal congestion.\n- Consult a doctor if symptoms worsen or persist."
    },
    "cough": {
        "keywords": "cough,sore throat,dry cough,throat pain,खांसी",
        "response_en": "- Drink warm water with honey.\n- Avoid cold drinks and dairy if it worsens cough.\n- Use a humidifier or steam inhalation.\n- See a doctor if cough persists more than a week."
    },
    "flu": {
        "keywords": "flu,influenza,body ache,chills,फ्लू",
        "response_en": "- Rest well and avoid contact with others.\n- Drink plenty of fluids and warm teas.\n- Take fever reducers if necessary.\n- Consult a doctor if symptoms persist beyond 5 days."
    },
    "typhoid": {
        "keywords": "typhoid,high fever,weakness,abdominal pain,टाइफाइड",
        "response_en": "- Drink plenty of water to stay hydrated.\n- Eat light, easily digestible foods.\n- Take antibiotics only as prescribed by a doctor.\n- Seek immediate medical care if fever is very high or persistent."
    },
    "headache": {
        "keywords": "headache,migraine,head pain,सिरदर्द",
        "response_en": "- Rest in a quiet, dark room.\n- Stay hydrated throughout the day.\n- Use mild pain relievers if needed.\n- Consult a doctor if headaches are severe or frequent."
    },
    "pain": {
        "keywords": "pain,body ache,joint pain,muscle pain,back pain,दर्द",
        "response_en": "- Identify the exact location of pain.\n- Rest the affected area and apply ice or heat if suitable.\n- Gentle stretching or physiotherapy may help.\n- Consult a doctor if pain is severe or persists."
    },
    "healthy diet": {
        "keywords": "diet,healthy diet,meal plan,nutrition",
        "response_en": "- Eat more fruits, vegetables, and whole grains.\n- Include proteins like pulses, eggs, and nuts.\n- Avoid junk and oily food.\n- Drink 2-3 liters of water daily."
    },
    "wellness tips": {
        "keywords": "tips,wellness,health tips",
        "response_en": "- Sleep 7-8 hours daily.\n- Practice yoga or light exercise.\n- Manage stress with meditation.\n- Stay connected with friends and family."
    },
    "Hello": {
        "keywords": "hi,hii,hello,hey,good morning,good evening",
        "response_en": "- I’m your Wellness Guide Bot.\n- Ask me about health tips, diet, or symptoms.\n- I can reply in English or Hindi."
    },
    "bye": {
        "keywords": "bye,goodbye,see you",
        "response_en": "- Goodbye! Take care and stay healthy.\n- Remember to drink water and rest well."
    },
    "thank": {
        "keywords": "thank,thanks,thank you",
        "response_en": "- You’re welcome! Stay safe and healthy.\n- I’m always here to help."
    }
}

# populate kb if empty
cursor.execute("SELECT COUNT(*) FROM kb")
if cursor.fetchone()[0] == 0:
    for k, v in initial_kb.items():
        cursor.execute("INSERT OR REPLACE INTO kb (intent, keywords, response_en) VALUES (?, ?, ?)", (k, v["keywords"], v["response_en"]))
    conn.commit()

def load_kb_from_db():
    cursor.execute("SELECT intent, keywords, response_en FROM kb")
    rows = cursor.fetchall()
    kb = {}
    for intent, keywords, response_en in rows:
        kw = [x.strip() for x in (keywords or "").split(",") if x.strip()]
        kb[intent] = {"keywords": kw, "response_en": response_en}
    return kb

health_knowledge_base = load_kb_from_db()

def hash_password_raw(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

def check_password_raw(password, hashed):
    try:
        return bcrypt.checkpw(password.encode('utf-8'), hashed)
    except Exception:
        return False

def generate_token(email):
    return jwt.encode({"email": email, "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=4)}, SECRET_KEY, algorithm="HS256")

def verify_token(token):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        return payload.get("email")
    except Exception:
        return None

if MarianMTModel and MarianTokenizer:
    @st.cache_resource
    def load_translation_models():
        try:
            en_to_hi_model_name = "Helsinki-NLP/opus-mt-en-hi"
            hi_to_en_model_name = "Helsinki-NLP/opus-mt-hi-en"
            en_to_hi_tokenizer = MarianTokenizer.from_pretrained(en_to_hi_model_name)
            en_to_hi_model = MarianMTModel.from_pretrained(en_to_hi_model_name)
            hi_to_en_tokenizer = MarianTokenizer.from_pretrained(hi_to_en_model_name)
            hi_to_en_model = MarianMTModel.from_pretrained(hi_to_en_model_name)
            return en_to_hi_model, en_to_hi_tokenizer, hi_to_en_model, hi_to_en_tokenizer
        except Exception:
            return None, None, None, None
    en_to_hi_model, en_to_hi_tokenizer, hi_to_en_model, hi_to_en_tokenizer = load_translation_models()
else:
    en_to_hi_model = en_to_hi_tokenizer = hi_to_en_model = hi_to_en_tokenizer = None

def translate_en_to_hi(text):
    if not en_to_hi_model:
        return text
    tokens = en_to_hi_tokenizer([text], return_tensors="pt", padding=True)
    translated = en_to_hi_model.generate(**tokens)
    return en_to_hi_tokenizer.decode(translated[0], skip_special_tokens=True)

def translate_hi_to_en(text):
    if not hi_to_en_model:
        return text
    tokens = hi_to_en_tokenizer([text], return_tensors="pt", padding=True)
    translated = hi_to_en_model.generate(**tokens)
    return hi_to_en_tokenizer.decode(translated[0], skip_special_tokens=True)

try:
    nlp = pipeline("sentiment-analysis") if pipeline else None
except Exception:
    nlp = None

IST_OFFSET = datetime.timedelta(hours=5, minutes=30)

def format_ts_to_ist(ts):
    if not ts:
        return ""
    try:
        ts_clean = ts.split('.')[0]
        dt = datetime.datetime.strptime(ts_clean, "%Y-%m-%d %H:%M:%S")
    except Exception:
        try:
            dt = datetime.datetime.fromisoformat(ts)
        except Exception:
            return ts
    # Assume stored as UTC, convert to IST
    dt_ist = dt + IST_OFFSET
    return dt_ist.strftime("%Y-%m-%d %H:%M:%S IST")

def recognize_intents(text):
    text = (text or "").lower()
    clean_text = re.sub(r"[^\w\s\u0900-\u097F]", '', text)
    matched = []
    kb = load_kb_from_db()
    for intent, data in kb.items():
        for kw in data["keywords"]:
            clean_kw = re.sub(r"[^\w\s\u0900-\u097F]", '', kw.lower())
            if re.search(rf'\b{re.escape(clean_kw)}\b', clean_text):
                if intent not in matched:
                    matched.append(intent)
    if not matched:
        if nlp:
            try:
                r = nlp(clean_text)
                if r and r[0]['label'] == 'NEGATIVE':
                    matched.append("complaint")
                else:
                    matched.append("unknown")
            except Exception:
                matched.append("unknown")
        else:
            matched.append("unknown")
    return matched

def recognize_minor_intent(text):
    text = (text or "").lower()
    kb = load_kb_from_db()
    for intent in ("Hello", "thank", "bye", "wellness tips"):
        for kw in kb.get(intent, {}).get("keywords", []):
            if re.search(rf'\b{re.escape(kw.lower())}\b', text):
                return intent
    return None

def respond_multiple(intents, language="English"):
    kb = load_kb_from_db()
    responses = []
    disclaimer_intents = ["fever","cold","cough","flu","typhoid","headache","pain"]
    include_disclaimer = any(i in disclaimer_intents for i in intents)
    for it in intents:
        if it in kb:
            response_en = kb[it]["response_en"]
            response = translate_en_to_hi(response_en) if language == "Hindi" else response_en
            heading = translate_en_to_hi(it.capitalize()) if language=="Hindi" else it.capitalize()
            responses.append(f"{heading}\n{response}")
        elif it == "complaint":
            responses.append("I'm sorry to hear that. Please explain more." if language=="English" else translate_en_to_hi("I'm sorry to hear that. Please explain more."))
        else:
            responses.append("I'm not sure. Please consult a doctor." if language=="English" else translate_en_to_hi("I'm not sure. Please consult a doctor."))
    final = "\n\n".join(responses)
    if include_disclaimer:
        if not language:
            language = "English"
        if language.lower() == "english":
            disc= "⚠️ Disclaimer: This is general advice. Always consult a doctor."
        else:
            disc = "⚠️अस्वीकरण: यह सामान्य सलाह है। हमेशा डॉक्टर से सलाह लें।"
        final= f"{final}\n\n{disc}"

    return final

st.set_page_config(page_title="Wellness Guide Bot", page_icon="🤖", layout="wide")

st.markdown("""
<style>
    body {
        background: linear-gradient(135deg, #0f172a 0%, #0ea5a4 100%);
        color: #e6f7f7;
    }
    .small-btn { padding:6px 10px; font-size:16px }
    .inline-feedback { display:flex; gap:8px; align-items:center }
</style>
""", unsafe_allow_html=True)

st.markdown("<h1 style='text-align:center; color:royalblue;'>🩺Wellness Guide Bot</h1>", unsafe_allow_html=True)

if "role" not in st.session_state: st.session_state["role"] = None
if "view" not in st.session_state: st.session_state["view"] = None
if "token" not in st.session_state: st.session_state["token"] = None
if "chat_history" not in st.session_state: st.session_state["chat_history"] = []
if "all_chat_history" not in st.session_state: st.session_state["all_chat_history"] = []

def render_sidebar():
    with st.sidebar:
        st.markdown("### ⚙ Options")
        if st.session_state.get("view") != "profile":
            if st.button("Go to Profile"):
                st.session_state["view"] = "profile"; st.rerun()
        if st.session_state.get("view") != "chatbot":
            if st.button("Go to Chatbot"):
                st.session_state["view"] = "chatbot"; st.rerun()
        if st.session_state.get("view") == "chatbot":
            if st.button("Clear Chat"):
                st.session_state["chat_history"] = []; st.success("✅ Chat cleared!")
            if st.button("Show Previous Chat"):
                email = verify_token(st.session_state.get("token"))
                if email:
                    cursor.execute("SELECT question, response, timestamp FROM queries WHERE user_email=? ORDER BY timestamp DESC", (email,))
                    rows = cursor.fetchall()
                    if rows:
                        st.markdown("#### Previous Chat")
                        for q, r, ts in rows:
                            points = r.split("\n")
                            formatted = ""
                            for p in points:
                                line = p.strip()
                                if line:
                                    if line.startswith("- "):
                                        formatted += f"• {line[2:]}<br>"
                                    else:
                                        formatted += f"{line}<br>"
                            st.markdown(f"""
                                <div style="margin:6px 0; max-width:720px">
                                    <div style="background:#0b1220; color:#fff; padding:8px; border-radius:8px;">
                                        <b>You:</b> {q}<br><b>Bot:</b><br>{formatted}<br><small style='color:gray'>{format_ts_to_ist(ts)}</small>
                                    </div>
                                </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("No previous chat.")
                else:
                    st.info("Please login first.")
        if st.button("Logout"):
            st.session_state["token"] = None
            st.session_state["view"] = None
            st.session_state["role"] = None
            st.session_state["chat_history"] = []
            st.success("✅ Logged out successfully!")
            st.rerun()

if st.session_state["view"] is None and st.session_state["role"] is None:
    st.markdown("<h2 style='text-align:center; color:green;'>Who are you?</h2>", unsafe_allow_html=True)
    st.markdown("<p style='text-align:center; color:#cbd5e1;'>Select a role to continue</p>", unsafe_allow_html=True)

    # create 3 columns for centering
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        c1, c2 = st.columns(2)
        with c1:
            user_btn = st.button("👤 Login as User", use_container_width=True)
        with c2:
            admin_btn = st.button("🧑‍💼 Login as Admin", use_container_width=True)

    if user_btn:
        st.session_state["role"] = "user"
        st.session_state["view"] = "user_register"
        st.rerun()

    if admin_btn:
        st.session_state["role"] = "admin"
        st.session_state["view"] = "admin_login"
        st.rerun()

    st.markdown(
        "<p style='text-align:center; color:#9ca3af; margin-top:10px;'>Choose <b>User</b> for normal use or <b>Admin</b> to manage the bot.</p>",
        unsafe_allow_html=True
    )

elif st.session_state["view"] == "admin_login":
    st.markdown("<h2 style='text-align:center;'>🧑‍💼 Admin Login</h2>", unsafe_allow_html=True)

    col1, col2, col3 = st.columns([1, 1, 1])
    with col2:
        aemail = st.text_input("Admin Email", key="aemail")
        apass = st.text_input("Password", type="password", key="apass")

        if st.button("Login as Admin"):
            cursor.execute("SELECT password_hash FROM admin_profile WHERE email=?", (aemail,))
            row = cursor.fetchone()
            if (aemail == ADMIN_EMAIL and apass == ADMIN_PASS) or (row and check_password_raw(apass, row[0])):
                st.session_state["token"] = "admin_token"
                st.session_state["view"] = "admin_dashboard"
                st.success("✅ Admin logged in"); st.rerun()
            else:
                st.error("❌ Invalid admin credentials")

        if st.button("🔙 Back to Role Selection"):
            st.session_state["role"] = None
            st.session_state["view"] = None
            st.rerun()



#  ADMIN DASHBOARD
elif st.session_state["view"] == "admin_dashboard" and st.session_state.get("token") == "admin_token":
    st.sidebar.title("⚙️ Admin Menu")

    if st.sidebar.button("📊 Dashboard"):
        st.session_state["admin_page"] = "dashboard"
    if st.sidebar.button("🧠 Knowledge Base"):
        st.session_state["admin_page"] = "kb"
    if st.sidebar.button("💬 Feedback"):
        st.session_state["admin_page"] = "feedback"
    if st.sidebar.button("🚪 Logout"):
        st.session_state.clear()
        st.session_state["view"] = None
        st.rerun()

    page = st.session_state.get("admin_page", "dashboard")

    if page == "dashboard":
        st.markdown("## 📊 Admin Dashboard")

        cursor.execute("SELECT COUNT(*) FROM users"); total_users = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM queries"); total_queries = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM kb"); total_kb = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM feedback WHERE feedback_type='like'"); likes = cursor.fetchone()[0] or 0
        cursor.execute("SELECT COUNT(*) FROM feedback WHERE feedback_type='dislike'"); dislikes = cursor.fetchone()[0] or 0
        total_fb = likes + dislikes

        c1, c2, c3, c4 = st.columns(4)
        box_style = "background:#5a67d8; color:white; padding:15px; border-radius:10px; text-align:center;"
        with c1:
            st.markdown(f"<div style='{box_style}'><b>👥Total Users</b><br>{total_users}</div>", unsafe_allow_html=True)
        with c2:
            st.markdown(f"<div style='{box_style}'><b>💬Total Queries</b><br>{total_queries}</div>", unsafe_allow_html=True)
        with c3:
            st.markdown(f"<div style='{box_style}'><b>🧠Knowledge Base intents</b><br>{total_kb}</div>", unsafe_allow_html=True)
        with c4:
            st.markdown(f"<div style='{box_style}'><b>👍Positive Feedback</b><br>{likes}</div>", unsafe_allow_html=True)

        sns.set_theme(style="whitegrid", palette="deep")

        st.markdown("---")
        st.subheader("📊 Analytics Overview")

        today = datetime.date.today()
        labels, counts = [], []

        cursor.execute("""
            SELECT date(timestamp), COUNT(*)
            FROM queries
            WHERE timestamp >= date('now','-13 days')
            GROUP BY date(timestamp)
        """)
        rows = cursor.fetchall()
        map_counts = {r[0]: r[1] for r in rows}

        for i in range(13, -1, -1):
            day = (today - datetime.timedelta(days=i)).isoformat()
            labels.append(day)
            counts.append(map_counts.get(day, 0))

        df = pd.DataFrame({"Date": labels, "Queries": counts})

        # --- Create two columns for side-by-side charts ---
        col1, col2 = st.columns([2, 1])

        with col1:
            # --- Seaborn Line Chart ---
            fig, ax = plt.subplots(figsize=(4, 2))
            sns.lineplot(
                data=df,
                x="Date",
                y="Queries",
                marker="o",
                linewidth=2,
                color=sns.color_palette("Blues")[4],
                ax=ax
            )

            ax.fill_between(df["Date"], df["Queries"], color=sns.color_palette("Blues")[2], alpha=0.25)
            ax.set_title("📈 Queries over last 14 days", fontsize=8, pad=8)
            ax.set_xlabel("Date", fontsize=7)
            ax.set_ylabel("Queries", fontsize=7)
            ax.tick_params(axis="x", rotation=60, labelsize=5)
            ax.tick_params(axis="y", labelsize=6)
            sns.despine(ax=ax)

            st.pyplot(fig)

        with col2:
            # --- Feedback Pie Chart ---
            st.markdown("### 🧩 Feedback Distribution")

            if total_fb == 0:
                st.info("No feedback yet.")
            else:
                fig2, ax2 = plt.subplots(figsize=(1.5, 1.5))
                colors = [sns.color_palette("pastel")[2], sns.color_palette("pastel")[5]]

                ax2.pie(
                    [likes, dislikes],
                    labels=["👍 Likes", "👎 Dislikes"],
                    autopct="%1.1f%%",
                    startangle=90,
                    colors=colors,
                    wedgeprops={"edgecolor": "white"},
                    textprops={'fontsize': 5}
                )
                ax2.set_title("Feedback Summary", fontsize=6, pad=8)
                ax2.axis("equal")

                st.pyplot(fig2)






    # KNOWLEDGE BASE PAGE
    elif page == "kb":
        st.markdown("## 🧠 Knowledge Base")
        kb = load_kb_from_db()
        st.markdown("### ➕ Add New Intent")
        with st.form("add_intent"):
            new_intent = st.text_input("Intent (e.g., fever)")
            new_keywords = st.text_input("Keywords (comma separated)")
            new_response = st.text_area("Response (English)", height=100)
            submitted = st.form_submit_button("Add Intent")
            if submitted:
                if not new_intent.strip():
                    st.error("Intent name required")
                else:
                    cursor.execute("INSERT OR REPLACE INTO kb (intent, keywords, response_en) VALUES (?, ?, ?)",
                                   (new_intent.strip().lower(), new_keywords.strip().lower(), new_response.strip()))
                    conn.commit()
                    st.success("✅ Intent added/updated!")
                    health_knowledge_base = load_kb_from_db()
                    st.rerun()

        st.markdown("---")
        st.markdown("### 📋 Existing Intents")
        kb_table = cursor.execute("SELECT intent, keywords, response_en FROM kb ORDER BY intent").fetchall()
        for intent, keywords, response_en in kb_table:
            with st.expander(f"{intent}"):
                st.markdown(f"**Keywords:** {keywords}")
                st.markdown("**Response:**")
                st.write(response_en)
                col_a, col_b = st.columns(2)
                with col_a:
                    if st.button(f"✏️ Edit {intent}", key=f"edit_{intent}"):
                        st.session_state["kb_edit_intent"] = intent
                        st.rerun()
                with col_b:
                    if st.button(f"🗑️ Delete {intent}", key=f"del_{intent}"):
                        cursor.execute("DELETE FROM kb WHERE intent=?", (intent,))
                        conn.commit()
                        st.success(f"Deleted {intent}")
                        health_knowledge_base = load_kb_from_db()
                        st.rerun()

    # FEEDBACK PAGE
    elif page == "feedback":
        st.markdown("## 💬 Feedback")
        fb_rows = cursor.execute("""
            SELECT f.user_email, u.name, f.query_id, f.feedback_type, f.comment, f.timestamp
            FROM feedback f LEFT JOIN users u ON f.user_email = u.email ORDER BY f.timestamp DESC
        """).fetchall()

        if not fb_rows:
            st.info("No feedback yet.")
        else:
            import pandas as pd
            df = pd.DataFrame(fb_rows, columns=["email","name","query_id","feedback_type","comment","timestamp"])
            df["timestamp"] = df["timestamp"].apply(format_ts_to_ist)
            df["feedback_type"] = df["feedback_type"].replace({"like":"👍","dislike":"👎"})
            df.index = range(1, len(df) + 1)
            st.dataframe(df, use_container_width=True)




#USER REGISTER
elif st.session_state["view"] == "user_register":
    col1, col2, col3 = st.columns([1, 1.2, 1])
    with col2:
        st.markdown("<h2 style='text-align:center;'>📝 Register</h2>", unsafe_allow_html=True)

        reg_email = st.text_input("Email", key="reg_email")
        reg_pass = st.text_input("Password", type="password", key="reg_pass")

        if st.button("Create Account", use_container_width=True):
            if not reg_email or not reg_pass:
                st.error("Enter email and password")
            else:
                cursor.execute("SELECT * FROM users WHERE email=?", (reg_email,))
                if cursor.fetchone():
                    st.warning("User already exists")
                else:
                    hashed = hash_password_raw(reg_pass)
                    cursor.execute(
                        "INSERT INTO users (email, password, name, age_group, language) VALUES (?, ?, ?, ?, ?)",
                        (reg_email, hashed, "", "18-25", "English")
                    )
                    conn.commit()
                    st.success("✅ Account created successfully! Redirecting to Login...")
                    st.session_state["view"] = "user_login"
                    st.rerun()

        st.markdown("<p style='text-align:center;'>Already have an account?</p>", unsafe_allow_html=True)

        bcol1, bcol2 = st.columns(2)
        with bcol1:
            if st.button("Login", use_container_width=True):
                st.session_state["view"] = "user_login"
                st.rerun()
        with bcol2:
            if st.button("🔙Back to Role Selection", use_container_width=True):
                st.session_state["role"] = None
                st.session_state["view"] = None
                st.rerun()


#  USER LOGIN
elif st.session_state["view"] == "user_login":
    col1, col2, col3 = st.columns([1, 1.2, 1])
    with col2:
        st.markdown("<h2 style='text-align:center;'>🔑 Login</h2>", unsafe_allow_html=True)

        login_email = st.text_input("Email", key="login_email")
        login_pass = st.text_input("Password", type="password", key="login_pass")

        if st.button("Login", use_container_width=True):
            cursor.execute("SELECT password FROM users WHERE email=?", (login_email,))
            r = cursor.fetchone()
            if r and check_password_raw(login_pass, r[0]):
                st.session_state["token"] = generate_token(login_email)
                st.session_state["view"] = "profile"
                st.success("✅ Login successful! Redirecting to Profile...")
                st.rerun()
            else:
                st.error("❌ Invalid credentials")

        st.markdown("<p style='text-align:center;'>Don't have an account?</p>", unsafe_allow_html=True)

        bcol1, bcol2 = st.columns(2)
        with bcol1:
            if st.button("Create new account", use_container_width=True):
                st.session_state["view"] = "user_register"
                st.rerun()
        with bcol2:
            if st.button("🔙Back to Role Selection", use_container_width=True):
                st.session_state["role"] = None
                st.session_state["view"] = None
                st.rerun()


# PROFILE
elif st.session_state["view"] == "profile":
    render_sidebar()

    st.markdown("<h2 style='text-align:center;'>👤 Profile</h2>", unsafe_allow_html=True)

    if st.session_state.get("token"):
        email_verified = verify_token(st.session_state["token"])
        if email_verified:
            cursor.execute("SELECT name, age_group, language FROM users WHERE email=?", (email_verified,))
            profile = cursor.fetchone() or ("", "18-25", "English")

            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                name = st.text_input("Name", value=profile[0])
                age_options = ["<18", "18-25", "26-40", "40+"]
                age_group = st.selectbox(
                    "Age Group", age_options,
                    index=age_options.index(profile[1]) if profile[1] in age_options else 1
                )
                lang_options = ["English", "Hindi"]
                language = st.radio(
                    "Preferred Language", lang_options,
                    index=lang_options.index(profile[2]) if profile[2] in lang_options else 0
                )
                if st.button("💾 Save Profile"):
                    cursor.execute(
                        "UPDATE users SET name=?, age_group=?, language=? WHERE email=?",
                        (name, age_group, language, email_verified)
                    )
                    conn.commit()
                    st.success("✅ Profile updated successfully!")


        else:
            st.error("⚠ Session expired. Please login again.")
    else:
        st.info("ℹ Please login first to view your profile.")

# CHATBOT
elif st.session_state["view"] == "chatbot":
    render_sidebar()
    st.markdown("<h2>💬 Wellness Chatbot</h2>", unsafe_allow_html=True)
    if st.session_state.get("token"):
        email_verified = verify_token(st.session_state["token"])
        if email_verified:
            cursor.execute("SELECT language FROM users WHERE email=?", (email_verified,))
            lp = cursor.fetchone()
            language = lp[0] if lp else "English"

            user_input = st.chat_input("Type your health question...", key="chat_input")
            if user_input and user_input.strip():
                is_hindi = any('\u0900' <= ch <= '\u097F' for ch in user_input)
                user_input_en = translate_hi_to_en(user_input) if is_hindi else user_input
                intents = recognize_intents(user_input_en)
                lang_to_use = "Hindi" if is_hindi else language
                if not intents or intents == ["unknown"]:
                    minor = recognize_minor_intent(user_input_en)
                    if minor:
                        bot_response = respond_multiple([minor], lang_to_use)
                    else:
                        bot_response = "I'm not sure. Please consult a doctor." if lang_to_use=="English" else translate_en_to_hi("I'm not sure. Please consult a doctor.")
                else:
                    bot_response = respond_multiple(intents, lang_to_use)

                cursor.execute("INSERT INTO queries (user_email, question, response) VALUES (?, ?, ?)", (email_verified, user_input, bot_response))
                conn.commit()
                qid = cursor.lastrowid

                st.session_state["chat_history"].append(("user", user_input))
                st.session_state["chat_history"].append(("bot", bot_response, qid))
                st.session_state["all_chat_history"].append(("user", user_input))
                st.session_state["all_chat_history"].append(("bot", bot_response))

            for item in st.session_state.get("chat_history", []):
                if item[0] == "bot":
                    _, msg, qid = item
                    points = msg.split("\n")
                    formatted = ""
                    for p in points:
                        line = p.strip()
                        if line:
                            if line.startswith("- "):
                                formatted += f"• {line[2:]}<br>"
                            else:
                                formatted += f"{line}<br>"
                    st.markdown(f"""
                        <div style="display:flex; justify-content:flex-start; margin:6px 0;">
                            <div style="background-color:#081226; color:#E0E0E0; padding:12px; border-radius:12px; max-width:78%;">
                                {formatted}
                                <br><small style='color:gray'>{format_ts_to_ist(cursor.execute('SELECT timestamp FROM queries WHERE id=?',(qid,)).fetchone()[0])}</small>
                            </div>
                        </div>
                    """, unsafe_allow_html=True)
                    # feedback UI
                    cols = st.columns([1,1,4])
                    with cols[0]:
                        if st.button("👍", key=f"like_{qid}"):
                            cursor.execute("INSERT INTO feedback (user_email, query_id, feedback_type, comment) VALUES (?, ?, ?, ?)", (email_verified, qid, "like", ""))
                            conn.commit()
                            st.success("Thanks for your feedback!")
                    with cols[1]:
                        if st.button("👎", key=f"dislike_{qid}"):
                            st.session_state[f"await_comment_{qid}"] = True
                    with cols[2]:
                        if st.session_state.get(f"await_comment_{qid}"):
                            comment = st.text_input("Optional: what went wrong?", key=f"comment_{qid}")
                            if st.button("Submit", key=f"submit_comment_{qid}"):
                                cursor.execute("INSERT INTO feedback (user_email, query_id, feedback_type, comment) VALUES (?, ?, ?, ?)", (email_verified, qid, "dislike", comment))
                                conn.commit()
                                st.warning("Received — we'll review this.")
                                st.session_state[f"await_comment_{qid}"] = False
                else:
                    _, msg = item
                    st.markdown(f"""
                        <div style="display:flex; justify-content:flex-end; margin:6px 0;">
                            <div style="background-color:#061627; color:#FFFFFF; padding:12px; border-radius:12px; max-width:78%;">
                                {msg}
                            </div>
                        </div>
                    """, unsafe_allow_html=True)
        else:
            st.error("⚠️ Session expired. Please login again.")
    else:
        st.info("ℹ Please login first to use Chatbot.")
    st.markdown("</div>", unsafe_allow_html=True)

else:
    st.session_state["role"] = None
    st.session_state["view"] = None
    st.rerun()